---
alwaysApply: true
---
# Project Execution Rules (Repo-Local, Python)

Commands (Python):
- Format: `black .`
- Lint: `ruff check .`
- Types: `mypy .`
- Unit: `pytest -q`
- Integration: `pytest -q tests/acceptance` (or another folder)
- Coverage: `pytest --cov=src --cov-report=term-missing --cov-fail-under=85`
- Build (pkg): `python -m build`  
- Security: `pip-audit` (and optionally `bandit -r src -ll`)

Acceptance Criteria & Budgets (examples):
- API p95 â‰¤ 200ms @ 100 RPS (local).
- Parser p95 < 150ms on Apple M1 Max (local benchmark).
- Coverage (changed files): lines â‰¥ 85%, branches â‰¥ 75% (enforced via fail-under & review).

CI Gates (must pass before merge):
- black --check, ruff, mypy, pytest (unit + acceptance), coverage â‰¥ threshold, build, pip-audit

Background Worker Defaults:
- WIP limits: builder=3, tester=2, integrator=1 (tune in `.oodatcaa/work/SPRINT_QUEUE.json`)
- Lease TTLs: planner=30m, builder=90m, tester=45m, refiner=45m, integrator=30m
- Heartbeat interval: 10m
- Locks expire after 5m (may be broken with log note)

Start-Over Gate (trigger when):
- Fundamental ACs unmet after two Adapt loops
- Architectural dead-end (Planner+Refiner agree)
- Scope creep beyond sprint plan

---

## CRITICAL: Agent Output Format (MANDATORY)

**EVERY agent response MUST end with this exact format:**

```markdown
---

## ðŸŽ¯ NEXT ACTION REQUIRED

**LAUNCH AGENT: <Agent Name>**

**COPY-PASTE THIS COMMAND:**
```
Load @Cursor Rules and @Project Rules. 
Run .oodatcaa/prompts/<exact-filename>.md exactly.
```

**Run as:** [Background | Once (not in background)]

**Why:** <Brief explanation>

**What it will do:** <Expected outcome>
```

**Agent filename examples:**
- Sprint Planner â†’ `sprint-planner.md`
- Planner (for task details) â†’ `planner.md`
- Builder â†’ `builder.md`
- Tester â†’ `tester.md`
- Negotiator â†’ `negotiator.md`

**NEVER output generic instructions - always provide the exact, copy-pasteable command block above.**

